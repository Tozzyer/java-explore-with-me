{
	"info": {
		"_postman_id": "8afecb4f-5e7f-4a52-832b-b4b67b2afaae",
		"name": "stats-svc tests (fixed body/raw + timestamp format)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "WorkTest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const pad = n => n < 10 ? '0' + n : n;",
							"function getFormattedTimestamp() {",
							"  const d = new Date();",
							"  return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;",
							"}",
							"function send(method, path, body = null, baseUrl) {",
							"  return new Promise((resolve, reject) => {",
							"    const req = {",
							"      url: (baseUrl || pm.collectionVariables.get('baseUrl') || 'http://localhost:9090') + path,",
							"      method: method,",
							"      header: { 'Content-Type': 'application/json' }",
							"    };",
							"    if (body != null && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {",
							"      req.body = { mode: 'raw', raw: JSON.stringify(body) };",
							"    }",
							"    pm.sendRequest(req, (err, res) => {",
							"      if (err || (res.code >= 400 && res.code <= 599)) {",
							"        let payload; try { payload = typeof res.json === 'function' ? res.json() : res; } catch(_) { payload = res; }",
							"        return reject(new Error(JSON.stringify(payload)));",
							"      }",
							"      try { resolve(res.json()); } catch(_) { resolve(res); }",
							"    });",
							"  });",
							"}",
							"(async () => {",
							"  pm.collectionVariables.set('uri', '/events/1&uris=/events/2');",
							"  const post1 = {",
							"    app: 'ewm-main-service',",
							"    uri: '/events/1',",
							"    ip: pm.variables.replaceIn('{{$randomIP}}'),",
							"    timestamp: getFormattedTimestamp()",
							"  };",
							"  const post2 = {",
							"    app: 'ewm-main-service',",
							"    uri: '/events/2',",
							"    ip: pm.variables.replaceIn('{{$randomIP}}'),",
							"    timestamp: getFormattedTimestamp()",
							"  };",
							"  await send('POST', '/hit', post1);",
							"  await send('POST', '/hit', post2);",
							"  await send('POST', '/hit', post2);",
							"  const source = await send(",
							"    'GET',",
							"    '/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=' +",
							"      encodeURIComponent('/events/1') + '&uris=' + encodeURIComponent('/events/2')",
							"  );",
							"  await send('POST', '/hit', post1);",
							"  await send('POST', '/hit', post2);",
							"  pm.collectionVariables.set('source', JSON.stringify(source));",
							"})().catch(e => {",
							"  console.error('Ошибка подготовки данных:', e);",
							"  throw e;",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Ответ должен содержать код 200 и JSON', function () {",
							"  pm.response.to.be.ok;",
							"  pm.response.to.be.withBody;",
							"  pm.response.to.be.json;",
							"});",
							"const target = pm.response.json();",
							"const source = JSON.parse(pm.collectionVariables.get('source') || '[]');",
							"pm.test('Ответ содержит поля app, uri, hits', function () {",
							"  pm.expect(target[0]).to.have.all.keys('app', 'uri', 'hits');",
							"  pm.expect(target[1]).to.have.all.keys('app', 'uri', 'hits');",
							"});",
							"pm.test('Сортировка по убыванию hits соблюдается', function () {",
							"  pm.expect(target[0].hits).to.be.above(target[1].hits);",
							"});",
							"pm.test('Кол-во просмотров соответствует сохранённым хитам (+1 после чтения)', function () {",
							"  pm.expect(source[0].hits + 1).to.equal(target[0].hits);",
							"  pm.expect(source[1].hits + 1).to.equal(target[1].hits);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{ "key": "Accept", "value": "application/json" }
				],
				"url": {
					"raw": "{{baseUrl}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris={{uri}}",
					"host": ["{{baseUrl}}"],
					"path": ["stats"],
					"query": [
						{ "key": "start", "value": "2020-05-05 00:00:00" },
						{ "key": "end", "value": "2035-05-05 00:00:00" },
						{ "key": "uris", "value": "{{uri}}" }
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{ "key": "baseUrl", "value": "http://localhost:9090" },
		{ "key": "uri", "value": "1" },
		{ "key": "source", "value": "" }
	]
}
